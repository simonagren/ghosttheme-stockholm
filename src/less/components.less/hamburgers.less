@charset "UTF-8";
/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
@hamburger-padding-x                       : 15px;
@hamburger-padding-y                       : 15px;
@hamburger-layer-width                     : 40px;
@hamburger-layer-height                    : 4px;
@hamburger-layer-spacing                   : 6px;
@hamburger-layer-color                     : #000;
@hamburger-layer-border-radius             : 4px;
@hamburger-hover-opacity                   : 0.7;
@hamburger-hover-transition-duration       : 0.15s;
@hamburger-hover-transition-timing-function: linear;

// To use CSS filters as the hover effect instead of opacity,
// set @hamburger-hover-use-filter as true and
// change the value of @hamburger-hover-filter accordingly.
@hamburger-hover-use-filter: false;
@hamburger-hover-filter    : opacity(50%);

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
@hamburger-types: (
  3dx,
  3dx-r,
  3dy,
  3dy-r,
  3dxy,
  3dxy-r,
  arrow,
  arrow-r,
  arrowalt,
  arrowalt-r,
  arrowturn,
  arrowturn-r,
  boring,
  collapse,
  collapse-r,
  elastic,
  elastic-r,
  emphatic,
  emphatic-r,
  minus,
  slider,
  slider-r,
  spin,
  spin-r,
  spring,
  spring-r,
  stand,
  stand-r,
  squeeze,
  vortex,
  vortex-r
);

// Base Hamburger (We need this)
// ==================================================
.hamburger {
  padding: @hamburger-padding-y @hamburger-padding-x;
  display: inline-block;
  cursor: pointer;

  transition-property: opacity, filter;
  transition-duration: @hamburger-hover-transition-duration;
  transition-timing-function: @hamburger-hover-transition-timing-function;

  // Normalize (<button>)
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;

  &:hover {
      opacity: @hamburger-hover-opacity;
  }
}

.hamburger-box {
  width: @hamburger-layer-width;
  height: @hamburger-layer-height * 3 + @hamburger-layer-spacing * 2;
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: @hamburger-layer-height / -2;

  &,
  &::before,
  &::after {
    width: @hamburger-layer-width;
    height: @hamburger-layer-height;
    background-color: @hamburger-layer-color;
    border-radius: @hamburger-layer-border-radius;
    position: absolute;
    transition-property: transform;
    transition-duration: 0.15s;
    transition-timing-function: ease;
  }

  &::before,
  &::after {
    content: "";
    display: block;
  }

  &::before {
    top: (@hamburger-layer-spacing + @hamburger-layer-height) * -1;
  }

  &::after {
    bottom: (@hamburger-layer-spacing + @hamburger-layer-height) * -1;
  }
}

// Hamburger types
// ==================================================

.hamburger--vortex {
    .hamburger-inner {
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0.19, 1, 0.22, 1);

      &::before,
      &::after {
        transition-duration: 0s;
        transition-delay: 0.1s;
        transition-timing-function: linear;
      }

      &::before {
        transition-property: top, opacity;
      }

      &::after {
        transition-property: bottom, transform;
      }
    }

    &.is-active {
      .hamburger-inner {
        transform: rotate(765deg);
        transition-timing-function: cubic-bezier(0.19, 1, 0.22, 1);

        &::before,
        &::after {
          transition-delay: 0s;
        }

        &::before {
          top: 0;
          opacity: 0;
        }

        &::after {
          bottom: 0;
          transform: rotate(90deg);
        }
      }
    }
  }

// ==================================================
// Cooking up additional types:
//
// The Sass for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in @hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index(@hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }
