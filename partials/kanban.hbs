<div class="fixed-action-btn">
  <a class="btn-floating btn-large red">
    <i class="large material-icons">mode_edit</i>
  </a>
  <ul>
    <li><a class="btn-floating red"><i class="material-icons">insert_chart</i></a></li>
    <li><a class="btn-floating yellow darken-1"><i class="material-icons">format_quote</i></a></li>
    <li><a class="btn-floating green"><i class="material-icons">publish</i></a></li>
    <li><a class="btn-floating blue"><i class="material-icons">attach_file</i></a></li>
  </ul>
</div>

<div class="kanbancontainer swiper-container">
<div class="kanban swiper-wrapper">

  <div class="column swiper-slide b">
  <div id="backlog">
    <h2>Backlog</h2>
    <span class="count"></span>
    <div class="cards">
    </div>
  </div>
</div>

<div class="column swiper-slide t">
  <div class="column swiper-slide" id="todo">
    <h2>To Do</h2>
    <span class="count"></span>
    <div class="cards"></div>
  </div>
  </div>

  <div class="column swiper-slide p">
  <div id="progress">
    <h2>In Progess</h2>
    <span class="count"></span>
    <div class="cards"></div>
  </div>
  </div>

  <div class="column swiper-slide d">
  <div id="done">
    <h2>Done</h2>
    <span class="count"></span>
    <div class="cards"></div>
  </div>
</div>

</div>
<div class="swiper-pagination"></div>
</div>

<!-- If we need pagination -->



<script src="https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js"></script>
<script>

function populateCards(cards, status) {
    for (var i = 0; i < cards.length; i++) {
      $('#' + status + ' .cards').append('<div class="card"> \n' +
        '<h5>' + cards[i].summary + '</h5> \n' +
        //'<p>' + cards[i].description + '</p> \n' +
        '<div style="background-color:' + cards[i].issuetype_color + ';" class="issuetype ' + cards[i].issuetype + '"><img src="' + cards[i].issuetype_url + '"></div> \n' +
        '<div class="info"> \n' +
          '<div class="left"> \n' +
            '<div class="avatar"><img src="https://www.gravatar.com/avatar/9eb3868db428fb602e03b3059608199b?s=250&d=mm&r=x"></div> \n' +
            '<div class="priority ' + cards[i].priority + '"><i class="fas fa-arrow-up"></i></div> \n' +
          '</div> \n' +
          '<div class="epic ' + cards[i].epic_name + '"><span>' + cards[i].epic_name + '</span> <i class="fas fa-bolt" style=color:' + cards[i].epic_color + ';"></i></div> \n' +
        '</div> \n' +
      '</div>');
    }
    $('#' + status).append('<span class="count"></span>');
  }

const backlogColumn = document.getElementById("backlog");
const todoColumn = document.getElementById("todo");
const progressColumn = document.getElementById("inprogress");
const doneColumn = document.getElementById("done");

  const client = stitch.Stitch.initializeDefaultAppClient('hackerjira-bzmfe');

  const db = client.getServiceClient(stitch.RemoteMongoClient.factory, 'mongodb-atlas').db('jira');

  client.auth.loginWithCredential(new stitch.AnonymousCredential()).then(() =>
    db.collection('hackersandslackers').find({status: 'Backlog', issuetype: { $in: ['Task', 'Story', 'Integrations', 'Bug']}, priority: { $in: ['Highest', 'High', 'Medium']}}, { limit: 6}).asArray()
  ).then(docs => {
      console.log("Found docs", docs)
      populateCards(docs, 'backlog')
    }).catch(err => {
    console.error(err)
  });

  client.auth.loginWithCredential(new stitch.AnonymousCredential()).then(() =>
    db.collection('hackersandslackers').find({status: 'To Do', issuetype: { $in: ['Task', 'Story', 'Integration', 'Bug', 'Data', 'Content']}}, { limit: 6}).asArray()
  ).then(docs => {
      console.log("Found docs", docs)
      populateCards(docs, 'todo')
    }).catch(err => {
    console.error(err)
  });

  client.auth.loginWithCredential(new stitch.AnonymousCredential()).then(() =>
    db.collection('hackersandslackers').find({status: 'In Progress', issuetype: { $in: ['Task', 'Story', 'Integration', 'Bug', 'Content', 'Data']}}, { limit: 6}).asArray()
  ).then(docs => {
      console.log("Found docs", docs)
      populateCards(docs, 'progress')
    }).catch(err => {
    console.error(err)
  });

  client.auth.loginWithCredential(new stitch.AnonymousCredential()).then(() =>
    db.collection('hackersandslackers').find({status: 'Done', issuetype: { $in: ['Task', 'Story', 'Integrations', 'Bug']}}, { limit: 6}).asArray()
  ).then(docs => {
      console.log("Found docs", docs)
      populateCards(docs, 'done')
    }).catch(err => {
    console.error(err)
  });

  client.callFunction("numCards", ["Backlog"]).then(result => {
      $('#backlog .count').text(result + ' issues');
  });

  client.callFunction("numCards", ["To Do"]).then(result => {
      $('#todo .count').text(result + ' issues');
  });

  client.callFunction("numCards", ["In Progress"]).then(result => {
      $('#progress .count').text(result + ' issues');
  });

  client.callFunction("numCards", ["Done"]).then(result => {
      $('#done .count').text(result + ' issues');
  });


  var swiper = new Swiper('.swiper-container', {
     height: 1000,
     noSwiping: true,
     spaceBetween: 8,
     centeredSlides: false,
     slidesPerView: 4,
     grabCursor: false,
     pagination: {
        el: '.swiper-pagination',
        type: 'bullets',
      },
     breakpoints: {
    // when window width is <= 320px
      1000: {
        slidesPerView: 2,
        noSwiping: false,
        grabCursor: true,
        initialSlide: 0,
        centeredSlides:false
      },
      800: {
        slidesPerView: 2,
        noSwiping: false,
        grabCursor: true,
        //slidesOffsetBefore: 20,
        //slidesOffsetAfter: 20,
      },
      600: {
        slidesPerView: 1,
        noSwiping: false,
        slidesPerColumnFill: 'column',
        grabCursor: true,
        //slidesOffsetBefore: 20,
        //slidesOffsetAfter: 20,
      },
      400: {
        slidesPerView: 1,
        noSwiping: false,
        slidesPerColumnFill: 'column',
        grabCursor: true,
        //slidesOffsetBefore: 20,
        //slidesOffsetAfter: 20,
      }
   }
 });

 swiper.pagination.render();

 swiper.on('resize', function () {
  swiper.slideTo(0, 300, false);
  swiper.pagination.update();
});


$(document).ready(function(){
  document.addEventListener('DOMContentLoaded', function() {
   var elems = document.querySelectorAll('.fixed-action-btn');
   var instances = M.FloatingActionButton.init(elems, {
     direction: 'left'
   });
 });
 $('.fixed-action-btn').floatingActionButton();
 });
</script>
